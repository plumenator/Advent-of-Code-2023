{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":6089,"byte_end":6122,"line_start":236,"line_end":236,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, be_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:236:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":6235,"byte_end":6270,"line_start":242,"line_end":242,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:242:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":6383,"byte_end":6418,"line_start":248,"line_end":248,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:248:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":6531,"byte_end":6566,"line_start":254,"line_end":254,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:254:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":7870,"byte_end":7903,"line_start":304,"line_end":304,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, le_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:304:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":8019,"byte_end":8054,"line_start":310,"line_end":310,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:310:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":8170,"byte_end":8205,"line_start":316,"line_end":316,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:316:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9412,"byte_end":9413,"line_start":277,"line_end":277,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs","byte_start":8321,"byte_end":8356,"line_start":322,"line_end":322,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":9054,"byte_end":9535,"line_start":269,"line_end":282,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map_impl!($i, $submac!($($args)*), $submac2!($($args2)*),);","highlight_start":1,"highlight_end":64},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map_impl!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map_impl!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:277:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map_impl!($i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/nom.rs:322:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27664,"byte_end":27665,"line_start":768,"line_end":768,"column_start":43,"column_end":44,"is_primary":true,"text":[{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":43,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27455,"byte_end":27481,"line_start":759,"line_end":759,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt_parser!($i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":3935,"byte_end":3957,"line_start":133,"line_end":133,"column_start":13,"column_end":35,"is_primary":false,"text":[{"text":"            $submac!(i, $($args)*)","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/character.rs","byte_start":2458,"byte_end":2501,"line_start":106,"line_end":106,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"named!(pub eol<char>, alt!(crlf | newline));","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"named!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":2465,"byte_end":4166,"line_start":95,"line_end":141,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! named (","highlight_start":1,"highlight_end":21},{"text":"    ($name:ident( $i:ty ) -> $o:ty, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":73},{"text":"        fn $name<'a>( i: $i ) -> $crate::IResult<'a,$i,$o> {","highlight_start":1,"highlight_end":61},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":68},{"text":"        fn $name( i: $i ) -> $crate::IResult<$i, $o> {","highlight_start":1,"highlight_end":55},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":62},{"text":"        fn $name<'a>( i: &'a[u8] ) -> $crate::IResult<'a, &'a [u8], $o> {","highlight_start":1,"highlight_end":74},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$life:item,$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":79},{"text":"        fn $name<$life>( i: $i ) -> $crate::IResult<$life,$i, $o> {","highlight_start":1,"highlight_end":68},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":55},{"text":"        fn $name<'a>( i: &'a [u8] ) -> $crate::IResult<'a,&[u8], &[u8]> {","highlight_start":1,"highlight_end":74},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident( $i:ty ) -> $o:ty, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":77},{"text":"        pub fn $name<'a>( i: $i ) -> $crate::IResult<'a,$i,$o> {","highlight_start":1,"highlight_end":65},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident<$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":72},{"text":"        pub fn $name( i: $i ) -> $crate::IResult<$i, $o> {","highlight_start":1,"highlight_end":59},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident<$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":66},{"text":"        pub fn $name( i: &[u8] ) -> $crate::IResult<&[u8], $o> {","highlight_start":1,"highlight_end":65},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":59},{"text":"        pub fn $name<'a>( i: &'a [u8] ) -> $crate::IResult<'a,&[u8], &[u8]> {","highlight_start":1,"highlight_end":78},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27393,"byte_end":27495,"line_start":756,"line_end":762,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt_parser!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27554,"byte_end":29520,"line_start":766,"line_end":834,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt_parser (","highlight_start":1,"highlight_end":26},{"text":"  ($i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":42},{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":64},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":82},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    alt_parser!($i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":44},{"text":"    alt_parser!($i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident) => (","highlight_start":1,"highlight_end":27},{"text":"    alt_parser!($i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr) => (","highlight_start":1,"highlight_end":17},{"text":"    $crate::IResult::Error($crate::Err::Position($crate::ErrorCode::Alt as u32,$i))","highlight_start":1,"highlight_end":84},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:768:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alt_parser!($i, call!($e) | $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/character.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mnamed!(pub eol<char>, alt!(crlf | newline));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `alt_parser` which comes from the expansion of the macro `named` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":29064,"byte_end":29065,"line_start":816,"line_end":816,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    alt_parser!($i, call!($e));","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27981,"byte_end":28007,"line_start":777,"line_end":777,"column_start":11,"column_end":37,"is_primary":false,"text":[{"text":"          alt_parser!($i, $($rest)*)","highlight_start":11,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27626,"byte_end":27664,"line_start":768,"line_end":768,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27455,"byte_end":27481,"line_start":759,"line_end":759,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt_parser!($i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":3935,"byte_end":3957,"line_start":133,"line_end":133,"column_start":13,"column_end":35,"is_primary":false,"text":[{"text":"            $submac!(i, $($args)*)","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/character.rs","byte_start":2458,"byte_end":2501,"line_start":106,"line_end":106,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"named!(pub eol<char>, alt!(crlf | newline));","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"named!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":2465,"byte_end":4166,"line_start":95,"line_end":141,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! named (","highlight_start":1,"highlight_end":21},{"text":"    ($name:ident( $i:ty ) -> $o:ty, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":73},{"text":"        fn $name<'a>( i: $i ) -> $crate::IResult<'a,$i,$o> {","highlight_start":1,"highlight_end":61},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":68},{"text":"        fn $name( i: $i ) -> $crate::IResult<$i, $o> {","highlight_start":1,"highlight_end":55},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":62},{"text":"        fn $name<'a>( i: &'a[u8] ) -> $crate::IResult<'a, &'a [u8], $o> {","highlight_start":1,"highlight_end":74},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident<$life:item,$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":79},{"text":"        fn $name<$life>( i: $i ) -> $crate::IResult<$life,$i, $o> {","highlight_start":1,"highlight_end":68},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($name:ident, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":55},{"text":"        fn $name<'a>( i: &'a [u8] ) -> $crate::IResult<'a,&[u8], &[u8]> {","highlight_start":1,"highlight_end":74},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident( $i:ty ) -> $o:ty, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":77},{"text":"        pub fn $name<'a>( i: $i ) -> $crate::IResult<'a,$i,$o> {","highlight_start":1,"highlight_end":65},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident<$i:ty,$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":72},{"text":"        pub fn $name( i: $i ) -> $crate::IResult<$i, $o> {","highlight_start":1,"highlight_end":59},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident<$o:ty>, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":66},{"text":"        pub fn $name( i: &[u8] ) -> $crate::IResult<&[u8], $o> {","highlight_start":1,"highlight_end":65},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    (pub $name:ident, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":59},{"text":"        pub fn $name<'a>( i: &'a [u8] ) -> $crate::IResult<'a,&[u8], &[u8]> {","highlight_start":1,"highlight_end":78},{"text":"            $submac!(i, $($args)*)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27393,"byte_end":27495,"line_start":756,"line_end":762,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt_parser!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27554,"byte_end":29520,"line_start":766,"line_end":834,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt_parser (","highlight_start":1,"highlight_end":26},{"text":"  ($i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":42},{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":64},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":82},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    alt_parser!($i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":44},{"text":"    alt_parser!($i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident) => (","highlight_start":1,"highlight_end":27},{"text":"    alt_parser!($i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr) => (","highlight_start":1,"highlight_end":17},{"text":"    $crate::IResult::Error($crate::Err::Position($crate::ErrorCode::Alt as u32,$i))","highlight_start":1,"highlight_end":84},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt_parser!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27554,"byte_end":29520,"line_start":766,"line_end":834,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt_parser (","highlight_start":1,"highlight_end":26},{"text":"  ($i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":42},{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":64},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":82},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    alt_parser!($i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":44},{"text":"    alt_parser!($i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident) => (","highlight_start":1,"highlight_end":27},{"text":"    alt_parser!($i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr) => (","highlight_start":1,"highlight_end":17},{"text":"    $crate::IResult::Error($crate::Err::Position($crate::ErrorCode::Alt as u32,$i))","highlight_start":1,"highlight_end":84},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt_parser!","def_site_span":{"file_name":"/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs","byte_start":27554,"byte_end":29520,"line_start":766,"line_end":834,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt_parser (","highlight_start":1,"highlight_end":26},{"text":"  ($i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":42},{"text":"    alt_parser!($i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":64},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":82},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    alt_parser!($i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":44},{"text":"    alt_parser!($i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $e:ident) => (","highlight_start":1,"highlight_end":27},{"text":"    alt_parser!($i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt_parser!($i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr) => (","highlight_start":1,"highlight_end":17},{"text":"    $crate::IResult::Error($crate::Err::Position($crate::ErrorCode::Alt as u32,$i))","highlight_start":1,"highlight_end":84},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/macros.rs:816:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alt_parser!($i, call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/AoC2023/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-0.5.0/src/character.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mnamed!(pub eol<char>, alt!(crlf | newline));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `alt_parser` which comes from the expansion of the macro `named` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
